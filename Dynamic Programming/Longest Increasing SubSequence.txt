Problem Statement
-----------------
You are working as a software engineer at a logistics company. The company has a fleet of delivery drones that deliver packages across a city. Each drone has a specific weight limit that determines how much it can carry.

Your manager asks you to develop an algorithm that helps find the longest sequence of drones that can be assigned one after another such that each next drone in the sequence has a higher weight limit than the previous one.

The goal is to maximize the number of deliveries with a single sequence of drones, ensuring each drone can carry more weight than the last one.

Task:
------
Write a Java program that takes n (number of drones) and an array representing the weight limits of these drones. Your program should find and print the longest sequence of increasing weight limits that can be assigned.

Input Format:
---------------
The first line contains an integer n (number of drones).
The second line contains n space-separated integers representing the weight limit of each drone.

Output Format:
--------------
Print: "The longest sequence of increasing weight limits is X" (where X is the length of the LIS).

Example:
--------
Input:
------
8  
1 5 2 3 4 5 3 2
  
Output:
-------
The longest sequence of increasing weight limits is 4


Solution
---------
import java.util.Scanner;
import java.util.Arrays;

class LongestIncreasingSubsequence {
    public static void main(String args[]) {
        Scanner in = new Scanner(System.in);

        // Read the size of the array
        int n = in.nextInt();
        int arr[] = new int[n];

        // Variable to store the maximum length of LIS
        int max_length = 1;

        // Read the array elements
        for (int i = 0; i < n; i++) {
            arr[i] = in.nextInt();
        }

        // LIS array initialized with 1 (each element is its own subsequence)
        int lis[] = new int[n];
        Arrays.fill(lis, 1);

        // Compute LIS for each index
        for (int i = 1; i < n; i++) {  
            for (int j = 0; j < i; j++) {  
                // If arr[i] is greater than arr[j], it can extend the LIS of arr[j]
                if (arr[i] > arr[j] && lis[i] < lis[j] + 1) {
                    lis[i] = lis[j] + 1;

                    // Update max_length if we found a longer LIS
                    if (lis[i] > max_length) {
                        max_length = lis[i];
                    }
                }
            }
        }

        // Print the length of the longest increasing subsequence
        System.out.println("The length is " + max_length);

        // Print the LIS array to understand the LIS length at each index
        for (int i = 0; i < n; i++) {
            System.out.print(lis[i] + " ");
        }

        in.close();
    }
}
