Suduko Solver
-------------


import java.util.Scanner;

class SudokuSolver {
    static boolean isSafe(int[][] mat, int row, int col, int num) {
        for (int x = 0; x < 9; x++)
            if (mat[row][x] == num || mat[x][col] == num)
                return false;

        int startRow = row - row % 3, startCol = col - col % 3;
        for (int i = 0; i < 3; i++)
            for (int j = 0; j < 3; j++)
                if (mat[i + startRow][j + startCol] == num)
                    return false;

        return true;
    }

    static boolean solveSudokuRec(int[][] mat, int row, int col) {
        if (row == 8 && col == 9)
            return true;
        if (col == 9) {
            row++;
            col = 0;
        }
        if (mat[row][col] != 0)
            return solveSudokuRec(mat, row, col + 1);

        for (int num = 1; num <= 9; num++) {
            if (isSafe(mat, row, col, num)) {
                mat[row][col] = num;
                if (solveSudokuRec(mat, row, col + 1))
                    return true;
                mat[row][col] = 0;
            }
        }
        return false;
    }

    static void solveSudoku(int[][] mat) {
        if (solveSudokuRec(mat, 0, 0)) {
            for (int[] row : mat) {
                for (int num : row)
                    System.out.print(num + " ");
                System.out.println();
            }
        } else {
            System.out.println("No solution exists");
        }
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int[][] mat = new int[9][9];

        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                mat[i][j] = scanner.nextInt();
            }
        }
        solveSudoku(mat);
    }
}


